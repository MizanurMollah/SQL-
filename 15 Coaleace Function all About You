			The COALESCE function in SQL is used to return the first non-NULL value in a 
			list of expressions. It is particularly useful for handling NULL values in 
			data and is widely supported across SQL databases, including PostgreSQL, SQL 
			Server, and MySQL. Below is a detailed overview of how COALESCE works, its 
			syntax, examples, and some best practices.

			Syntax of COALESCE
			sql
			Copy code
			
			
			COALESCE(expression1, expression2, ..., expressionN)
			
			
			expression1, expression2, ..., expressionN: A list of values or columns to check. 
			The COALESCE function evaluates each expression in order and returns the first non-NULL 
			value it encounters. If all expressions are NULL, it returns NULL.
			Key Characteristics
			Return Data Type: The return type of COALESCE is the data type with the highest 
			precedence among the arguments provided.
			Number of Arguments: You can supply any number 
			of arguments, but at least two are required for 
			COALESCE to be useful.
			Use Case: Commonly used to replace NULL values 
			in columns or to provide default values.
			Basic Examples of COALESCE
			1. Basic Usage
			sql
			Copy code
			
			
			SELECT COALESCE(NULL, NULL, 'Fallback Value', 'Another Value') AS Result;
			
			
			
			
			-- Output: 'Fallback Value'
			In this example, the function evaluates each 
			argument from left to right and returns 'Fallback Value', the first non-NULL expression.

			2. Replace NULL in a Column with a Default Value
			Let's say we have a table Employee with a Manager 
			column that might contain NULL values for employees without a manager.

			sql
			Copy code
			
			
			
			SELECT Name, COALESCE(Manager, 'No Manager') AS Manager
			FROM Employee;
			
			
			
			
			This query replaces any NULL values in the Manager column with the string 'No Manager'.

			3. Using Multiple Expressions
			sql
			Copy code
			
			
			
			SELECT Name, COALESCE(Phone, Email, 'No Contact Info') AS ContactInfo
			FROM Employee;
			
			
			
			This example checks for the first available contact method, 
			returning Phone if it’s not NULL, otherwise Email. If both are 
			NULL, it defaults to 'No Contact Info'.

			Practical Use Cases for COALESCE
			Default Values in Queries: COALESCE is often used to provide 
			default values for columns that might contain NULL.
			Combining Multiple Columns: Useful when combining multiple 
			columns where you need the first non-NULL value.
			Data Transformation: Helpful in data cleaning or ETL operations 
			to handle NULL values during data migration or reporting.
			Handling NULL for Mathematical Operations: Prevents 
			ULL values from causing unintended results in calculations.
			Examples with Common Use Cases
			1. Display Employee’s City or Default Message if NULL
			sql
			Copy code
			
			
			
			SELECT Name, COALESCE(City, 'Unknown City') AS City
			FROM Employee;
			
			
			
			2. Using COALESCE in Calculations
			Imagine we have a Sales table, and we want to calculate 
			the total sales, but some sales records may be NULL.

			sql
			Copy code
			
			
			SELECT 
			
			
				ProductID, 
				COALESCE(Sales, 0) * Quantity AS TotalSales
			FROM Sales;
			
			
			
			
			This replaces any NULL in Sales with 0 to ensure the 
			calculation doesn’t result in NULL.

			3. Using COALESCE with Dates
			Assume an Orders table with an OrderDate and ShippedDate 
			column. You want to display either the ShippedDate if available or the OrderDate as a fallback.

			sql
			Copy code
			
			
			
			SELECT 
				OrderID, 
				COALESCE(ShippedDate, OrderDate) AS ShippingOrOrderDate
			FROM Orders;
			
			
			
			4. Nested COALESCE Example
			In rare cases, you might need nested COALESCE to handle complex fallback logic.

			sql
			Copy code
			
			
			
			SELECT 
				EmployeeID, 
				COALESCE(Manager, COALESCE(Supervisor, 'No Supervisor Available')) AS Supervisor
			FROM Employee;
			
			Here, if Manager is NULL, Supervisor is checked next. If both 
			are NULL, it defaults to 'No Supervisor Available'.

			Comparison with ISNULL and IFNULL
			
			SQL Server: ISNULL() is similar to COALESCE, but it only accepts two arguments (ISNULL(value, replacement)).
			MySQL: IFNULL() serves a similar purpose but also accepts only two arguments.
			Best Practices
			Use COALESCE for Multiple Fallbacks: When you need multiple fallback 
			values, COALESCE is a better choice than ISNULL or IFNULL.
			Data Type Consistency: Ensure that the data types of arguments passed 
			to COALESCE are compatible to avoid unexpected data type conversion.
			Performance Considerations: COALESCE can sometimes be slower with many 
			arguments in a large dataset. Use it judiciously in performance-critical queries.
			Summary
			COALESCE is a flexible and powerful function for handling NULL values. 
			It’s commonly used to provide default values, prioritize values across 
			columns, and ensure calculations remain consistent.